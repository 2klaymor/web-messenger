generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Роли участников чата
enum ChatMemberRole {
  OWNER
  ADMIN
  MEMBER
}


// Пользователи
model User {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  displayName  String?
  passwordHash String
  createdAt    DateTime  @default(now())
  lastSeen     DateTime?
  // avatarUrl    String?   

  // Отношения
  sentMessages      Message[]           @relation("SentMessages")
  userRelations     UserRelation[]      @relation("UserRelations")  // Отношения с другими пользователями ТЕКУЩЕГО пользователя
  relatedToUsers    UserRelation[]      @relation("TargetOf")       // ЭТОТ пользователь относится к следуюшим пользователям
  chats             ChatMember[]
  messageReadStatus MessageReadStatus[]

  @@map("users")
}


// Отношения между пользователями (контакты, блокировки)
model UserRelation {
  id                  Int       @id @default(autoincrement())
  userId              Int       // Инициатор отношения
  targetUserId        Int       // Цель отношения
  displayName         String?   // Кастомное имя
  // notes       String?   // Заметки об отношении
  isBlocked           Boolean   @default(false) // Заблокирован ли пользователь
  isFavorite          Boolean   @default(false) // В избранном ли
  // createdAt   DateTime  @default(now())
  // updatedAt   DateTime  @updatedAt

  user                User @relation("UserRelations", fields: [userId], references: [id], onDelete: Cascade)
  target              User @relation("TargetOf", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@unique([userId, targetUserId]) // Уникальность отношения между пользователями
  @@map("user_relations")
}


// Чаты
model Chat {
  id          Int      @id @default(autoincrement())
  name        String?
  isGroup     Boolean  @default(false)
  // avatarUrl   String?
  // description String?
  // createdAt   DateTime @default(now())
  // updatedAt   DateTime @updatedAt

  messages     Message[]
  members      ChatMember[]

  @@map("chats")
}


// Участники чата (отношение между User и Chat)
model ChatMember {
  id          Int           @id @default(autoincrement())
  userId      Int
  chatId      Int
  role        ChatMemberRole @default(MEMBER)
  // joinedAt    DateTime      @default(now())
  // leftAt      DateTime?
  // isActive    Boolean       @default(true)
  // permissions String?       // JSON формат с правами

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat        Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId]) // Пользователь может быть только один раз в чате
  @@map("chat_members")
}


// Сообщения
model Message {
  id        Int       @id @default(autoincrement())
  content   String
  senderId  Int
  chatId    Int
  replyToId Int?
  isEdited  Boolean   @default(false)
  isDeleted Boolean   @default(false)
  // deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  sender      User                @relation("SentMessages", fields: [senderId], references: [id])
  chat        Chat                @relation(fields: [chatId], references: [id], onDelete: Cascade)
  replyTo     Message?            @relation("Reply", fields: [replyToId], references: [id], onDelete: SetNull)
  replies     Message[]           @relation("Reply")
  readStatus  MessageReadStatus[]

  @@map("messages")
}


// Статус прочтения сообщений
model MessageReadStatus {
  id          Int       @id @default(autoincrement())
  messageId   Int
  userId      Int
  isRead      Boolean   @default(false)
  // readAt      DateTime?
  sentAt      DateTime
  
  message     Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId])
  @@map("message_read_status")
}