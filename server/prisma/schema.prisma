generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


// Пользователи
model User {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  displayName  String?
  bio          String?
  avatar       String?
  passwordHash String
  lastSeen     DateTime?

  sentMessages Message[]  @relation("SentMessages")
  contacts     Contact[]  @relation("Contacts")     // ЭТИ являются контактами ТЕКУЩЕГО
  contactOf    Contact[]  @relation("ContactOf")    // ТЕКУЩИЙ является контактом ЭТИХ
  chats        ChatUser[]

  @@map("users")
}


// Отношения между пользователями (контакты, блокировки)
model Contact {
  ownerName   String     // Владелец контакта, тот кто добавил
  targetName  String     // Тот, кто является контактом
  displayName String?    // Кастомное имя

  owner  User @relation("Contacts", fields: [ownerName], references: [name], onDelete: Cascade)
  target User @relation("ContactOf", fields: [targetName], references: [name], onDelete: Cascade)

  @@id([ownerName, targetName])
  @@map("contacts")
}


// Чаты
model Chat {
  id Int @id @default(autoincrement())

  messages Message[]
  members  ChatUser[]

  @@map("chats")
}


// Участники чата (отношение между User и Chat)
model ChatUser {
  userName  String
  chatId    Int

  user User @relation(fields: [userName], references: [name], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@id(name: "userChat", [userName, chatId])
  @@map("chat_users")
}


// Сообщения
model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  chatId    Int
  createdAt DateTime @default(now())

  sender User @relation("SentMessages", fields: [senderId], references: [id])
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}
